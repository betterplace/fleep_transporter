#!/usr/bin/env ruby

require 'fleep_transporter'
require 'tins/go'

class FleepToSlack

  attr_reader :opts, :history

  def initialize
    @opts = Tins::GO.go 'a:cef:hi:o:psux:'
    opts[?h] and usage
    opts[?f] or usage
    Configuration.set(:channel_prefix, opts[?a] || '')
    Configuration.set(:ignore_empty, opts[?e])
    Configuration.set(:ignore, opts[?i] || '1:1')
    Configuration.set(:progress, opts[?p])
    Configuration.set(:url_prefix, opts[?x])
  end

  def usage
    puts "USAGE: -f INPUT_FILE [-o OUTPUT_FILE] [OPTIONS]"
    puts "-a     Add prefix to chanel name"
    puts "-c     print channels"
    puts "-e     ignore conversations with no topic"
    puts "-i     ignore channels with topic starting with [default: 1:1]"
    puts "-o     write output to file"
    puts "-s     prints stats"
    puts "-u     print users"
    puts "-p     print progress indicator"
    putx "-x     url prefix for internal files [default: empty]"
    puts "-h     prints help"
    exit 1
  end

  def run
    @history = FleepHistory.parse(opts[?f])
    opts[?s] and stats
    opts[?c] and channels
    opts[?u] and users
    write convert
  end

  def write(data)
    if opts[?o]
      File.open(opts[?o], 'wb') { |io| io.puts data }
    else
      puts data
    end
  end

  def users
    users = CSV.generate do |csv|
      csv << ['username', 'email']
      history.contacts.each do |_, c|
        csv << [c.username, c.email]
      end
    end
    write users
    exit 0
  end

  def channels
    channels = CSV.generate do |csv|
      csv << ['id', 'name', 'message_count', 'members']
      history.filtered_conversations.each do |c|
        csv << [
          c.id,
          c.topic,
          c.messages.count,
          conversation_members(c)
        ]
      end
    end
    write channels
    exit 0
  end

  def stats
    puts "Contacts: #{history.contacts.count}"
    puts "Conversations: #{history.conversations.count}"
    puts "Filtered Conversations: #{history.filtered_conversations.count}"
    exit 0
  end

  def conversation_members(conversation)
    conversation.members.map do |m|
      history.contact(m).username
    end.join(', ')
  end



  def filtered_text_messages
    history.filtered_conversations.map(&:text_messages).flatten
  end

  def convert
    CSV.generate do |csv|
      filtered_text_messages.with_fortschritt(silent: !Configuration.get(:progress)).each do |message|
        csv << [
          message.fortschritt.timestamp,
          message.channel_name,
          history.contact(message.user_account).email,
          message.text
        ]
      end
    end
  end
end

FleepToSlack.new.run
